# კომენტარის სახით ჩამოწერეთ ყველა სტრინგის მეთოდი, რომელიც ისწავლეთ. თითოეულს მიუწერეთ დეტალური განმარტება და მათზე მოიყვანეთ თითო-თითო მაგალითი
# 1. capitalize() - აბრუნებს სტრინგს, რომელსაც პირველი ასო აქვს დიდი, დანარჩენი კი პატარა.
print("hello".capitalize()) # Hello

# 2. casefold() - აბრუნებს სტრინგს, რომელიც არ აქვს დამოკიდებული რეგისტრით.
print("HELLO".casefold()) # hello

# 3. center() - აბრუნებს სტრინგს, რომელიც ცენტრირებულია მითითებული სიგანის სტრინგში.
print("hello".center(10)) # "    hello  "

# 4. count() - აბრუნებს მითითებული სტრინგის რაოდენობას მოცემულ სტრინგში.
print("hello hello".count("hello")) # 2

# 5. encode() - აბრუნებს სტრინგს, რომელიც გადაკოდირებულია მითითებული კოდირებით.
print("hello".encode("utf-8")) # b'hello'

# 6. endswith() - აბრუნებს მართებულობას, თუ სტრინგი მთავრდება მითითებული სტრინგით.
print("hello".endswith("lo")) # True

# 7. expandtabs() - აბრუნებს სტრინგს, რომელიც შეიცავს მითითებული სიგანის ტაბულაციებს.
print("hello\tworld".expandtabs(10)) # "hello     world"

# 8. find() - აბრუნებს მითითებული სტრინგის პირველი გამოჩენის ინდექსს მოცემულ სტრინგში.
print("hello world".find("world")) # 6

# 9. format() - აბრუნებს ფორმატირებულ სტრინგს.
print("hello {}".format("world")) # "hello world"

# 10. format_map() - აბრუნებს ფორმატირებულ სტრინგს.
print("hello {name}".format_map({"name": "world"})) # "hello world"

# 11. index() - აბრუნებს მითითებული სტრინგის პირველი გამოჩენის ინდექსს მოცემულ სტრინგში.
print("hello world".index("world")) # 6

# 12. isalnum() - აბრუნებს მართებულობას, თუ სტრინგი შეიცავს მხოლოდ ასო-ციფრებს.
print("hello123".isalnum()) # True

# 13. isalpha() - აბრუნებს მართებულობას, თუ სტრინგი შეიცავს მხოლოდ ასოებს.
print("hello".isalpha()) # True

# 14. isdecimal() - აბრუნებს მართებულობას, თუ სტრინგი შეიცავს მხოლოდ ციფრებს.
print("123".isdecimal()) # True

# 15. isdigit() - აბრუნებს მართებულობას, თუ სტრინგი შეიცავს მხოლოდ ციფრებს.
print("123".isdigit()) # True
